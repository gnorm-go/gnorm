// Code generated by gnorm, DO NOT EDIT!

package gnorm

import (
	"database/sql"
	"time"
)

// IntField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type IntField string

// Equals returns a WhereClause for this field.
func (f IntField) Equals(v int) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f IntField) GreaterThan(v int) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f IntField) LessThan(v int) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLess,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f IntField) GreaterOrEqual(v int) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f IntField) LessOrEqual(v int) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f IntField) NotEqual(v int) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f IntField) In(vals []int) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// StringField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type StringField string

// Equals returns a WhereClause for this field.
func (f StringField) Equals(v string) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f StringField) GreaterThan(v string) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f StringField) LessThan(v string) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLess,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f StringField) GreaterOrEqual(v string) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f StringField) LessOrEqual(v string) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f StringField) NotEqual(v string) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f StringField) In(vals []string) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// SqlNullStringField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type SqlNullStringField string

// Equals returns a WhereClause for this field.
func (f SqlNullStringField) Equals(v sql.NullString) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f SqlNullStringField) GreaterThan(v sql.NullString) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f SqlNullStringField) LessThan(v sql.NullString) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLess,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f SqlNullStringField) GreaterOrEqual(v sql.NullString) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f SqlNullStringField) LessOrEqual(v sql.NullString) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f SqlNullStringField) NotEqual(v sql.NullString) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f SqlNullStringField) In(vals []sql.NullString) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// Int64Field is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type Int64Field string

// Equals returns a WhereClause for this field.
func (f Int64Field) Equals(v int64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f Int64Field) GreaterThan(v int64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f Int64Field) LessThan(v int64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLess,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f Int64Field) GreaterOrEqual(v int64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f Int64Field) LessOrEqual(v int64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f Int64Field) NotEqual(v int64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f Int64Field) In(vals []int64) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// SqlNullInt64Field is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type SqlNullInt64Field string

// Equals returns a WhereClause for this field.
func (f SqlNullInt64Field) Equals(v sql.NullInt64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f SqlNullInt64Field) GreaterThan(v sql.NullInt64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f SqlNullInt64Field) LessThan(v sql.NullInt64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLess,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f SqlNullInt64Field) GreaterOrEqual(v sql.NullInt64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f SqlNullInt64Field) LessOrEqual(v sql.NullInt64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f SqlNullInt64Field) NotEqual(v sql.NullInt64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f SqlNullInt64Field) In(vals []sql.NullInt64) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// Float64Field is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type Float64Field string

// Equals returns a WhereClause for this field.
func (f Float64Field) Equals(v float64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f Float64Field) GreaterThan(v float64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f Float64Field) LessThan(v float64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLess,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f Float64Field) GreaterOrEqual(v float64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f Float64Field) LessOrEqual(v float64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f Float64Field) NotEqual(v float64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f Float64Field) In(vals []float64) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// SqlNullFloat64Field is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type SqlNullFloat64Field string

// Equals returns a WhereClause for this field.
func (f SqlNullFloat64Field) Equals(v sql.NullFloat64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f SqlNullFloat64Field) GreaterThan(v sql.NullFloat64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f SqlNullFloat64Field) LessThan(v sql.NullFloat64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLess,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f SqlNullFloat64Field) GreaterOrEqual(v sql.NullFloat64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f SqlNullFloat64Field) LessOrEqual(v sql.NullFloat64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f SqlNullFloat64Field) NotEqual(v sql.NullFloat64) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f SqlNullFloat64Field) In(vals []sql.NullFloat64) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// BoolField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type BoolField string

// Equals returns a WhereClause for this field.
func (f BoolField) Equals(v bool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f BoolField) GreaterThan(v bool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f BoolField) LessThan(v bool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLess,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f BoolField) GreaterOrEqual(v bool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f BoolField) LessOrEqual(v bool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f BoolField) NotEqual(v bool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f BoolField) In(vals []bool) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// SqlNullBoolField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type SqlNullBoolField string

// Equals returns a WhereClause for this field.
func (f SqlNullBoolField) Equals(v sql.NullBool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f SqlNullBoolField) GreaterThan(v sql.NullBool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f SqlNullBoolField) LessThan(v sql.NullBool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLess,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f SqlNullBoolField) GreaterOrEqual(v sql.NullBool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f SqlNullBoolField) LessOrEqual(v sql.NullBool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f SqlNullBoolField) NotEqual(v sql.NullBool) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f SqlNullBoolField) In(vals []sql.NullBool) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// TimeTimeField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type TimeTimeField string

// Equals returns a WhereClause for this field.
func (f TimeTimeField) Equals(v time.Time) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f TimeTimeField) GreaterThan(v time.Time) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f TimeTimeField) LessThan(v time.Time) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLess,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f TimeTimeField) GreaterOrEqual(v time.Time) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f TimeTimeField) LessOrEqual(v time.Time) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f TimeTimeField) NotEqual(v time.Time) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f TimeTimeField) In(vals []time.Time) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// SqliteNullTimeField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type SqliteNullTimeField string

// Equals returns a WhereClause for this field.
func (f SqliteNullTimeField) Equals(v sql.NullTime) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f SqliteNullTimeField) GreaterThan(v sql.NullTime) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f SqliteNullTimeField) LessThan(v sql.NullTime) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLess,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f SqliteNullTimeField) GreaterOrEqual(v sql.NullTime) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f SqliteNullTimeField) LessOrEqual(v sql.NullTime) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f SqliteNullTimeField) NotEqual(v sql.NullTime) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f SqliteNullTimeField) In(vals []sql.NullTime) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}

// Uint32Field is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type Uint32Field string

// Equals returns a WhereClause for this field.
func (f Uint32Field) Equals(v uint32) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f Uint32Field) GreaterThan(v uint32) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f Uint32Field) LessThan(v uint32) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLess,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f Uint32Field) GreaterOrEqual(v uint32) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f Uint32Field) LessOrEqual(v uint32) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f Uint32Field) NotEqual(v uint32) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f Uint32Field) In(vals []uint32) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field:  string(f),
		values: values,
	}
}
